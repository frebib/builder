#!/usr/bin/env bash
[ -n "$DEBUG" ] && set -ax
set -e

# Source: https://github.com/docker/docker/blob/master/hack/dind
### BEGIN dind

# Original version by Jerome Petazzoni <jerome@docker.com>
# See the blog post: https://blog.docker.com/2013/09/docker-can-now-run-within-docker/
#
# This script should be executed inside a docker container in privileged mode
# ('docker run --privileged', introduced in docker 0.6).

# Usage: dind CMD [ARG...]

# apparmor sucks and Docker needs to know that it's in a container (c) @tianon
export container=docker

if [ -d /sys/kernel/security ] && ! mountpoint -q /sys/kernel/security; then
	mount -t securityfs none /sys/kernel/security || {
		echo >&2 'Could not mount /sys/kernel/security.'
		echo >&2 'AppArmor detection and --privileged mode might break.'
	}
fi

# Mount /tmp (conditionally)
if ! mountpoint -q /tmp; then
	mount -t tmpfs none /tmp
fi
### END dind

# Ensure that all nodes in /dev/mapper correspond to mapped devices currently loaded by the device-mapper kernel driver
dmsetup mknodes

# Now, close extraneous file descriptors.
pushd /proc/self/fd >/dev/null
for FD in *
do
	case "$FD" in
	# Keep stdin/stdout/stderr
	[012])
		;;
	# Nuke everything else
	*)
		eval exec "$FD>&-"
		;;
	esac
done
popd >/dev/null


print_msg() {
	>&2 echo -e "\e[1m${1}\e[0m"
}

run_docker() {
	udevd --daemon
	print_msg "=> Starting docker"

	dockerd \
		--host=unix:///var/run/docker.sock \
		$DOCKER_DAEMON_ARGS > /var/log/docker.log 2>&1 &
	print_msg "=> Checking docker daemon"
	LOOP_LIMIT=60
	for (( i=0; ; i++ )); do
		if [ ${i} -eq ${LOOP_LIMIT} ]; then
			cat /var/log/docker.log
			print_msg "   Failed to start docker (did you use --privileged when running this container?)"
			exit 1
		fi
		sleep 1
		docker version > /dev/null 2>&1 && break
	done
}

#
# Start docker-in-docker or use an external docker daemon via mounted socket
#
DOCKER_USED=""
EXTERNAL_DOCKER=no
MOUNTED_DOCKER_FOLDER=no
if [ -S /var/run/docker.sock ]; then
	print_msg "=> Detected unix socket at /var/run/docker.sock"
	print_msg "=> Testing if docker version matches"
	if ! docker version > /dev/null 2>&1 ; then
		export DOCKER_VERSION=$(cat version_list | grep -P "^$(docker version 2>&1 > /dev/null | grep -iF "client and server don't have same version" | grep -oP 'server: *\d*\.\d*' | grep -oP '\d*\.\d*') .*$" | cut -d " " -f2)
		if [ "${DOCKER_VERSION}" != "" ]; then
			print_msg "=> Downloading docker ${DOCKER_VERSION}"
            apk --no-cache add tar >/dev/null
			curl https://get.docker.com/builds/Linux/x86_64/docker-${DOCKER_VERSION}.tgz | tar xvz --strip-components=1 -C /usr/local/bin
		fi
	fi
	docker version > /dev/null 2>&1 || { print_msg "   Failed to connect to docker daemon at /var/run/docker.sock" && exit 1; }
	EXTERNAL_DOCKER=yes
	DOCKER_USED="Using external docker ${DOCKER_VERSION} mounted at /var/run/docker.sock"
else
	DOCKER_USED="Using docker-in-docker ${DOCKER_VERSION}"
	if [ "$(ls -A /var/lib/docker)" ]; then
		print_msg "=> Detected pre-existing /var/lib/docker folder"
		MOUNTED_DOCKER_FOLDER=yes
		DOCKER_USED="Using docker-in-docker with an external /var/lib/docker folder"
	fi

    run_docker
fi
export DOCKER_USED EXTERNAL_DOCKER MOUNTED_DOCKER_FOLDER

# Add builder user to use with docker
add-user

exec "$@"
